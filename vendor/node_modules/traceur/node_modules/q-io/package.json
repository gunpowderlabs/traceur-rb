{
  "name": "q-io",
  "version": "1.10.9",
  "description": "IO using Q promises",
  "homepage": "http://github.com/kriskowal/q-io/",
  "author": {
    "name": "Kris Kowal",
    "email": "kris@cixar.com",
    "url": "http://github.com/kriskowal/"
  },
  "bugs": {
    "url": "http://github.com/kriskowal/q-io/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/kriskowal/q-io/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/kriskowal/q-io.git"
  },
  "dependencies": {
    "q": "~0.9.7",
    "qs": "~0.1.0",
    "url2": "~0.0.0",
    "mime": "~1.2.11",
    "mimeparse": "~0.1.4",
    "collections": "~0.2.0"
  },
  "devDependencies": {
    "jshint": "~0.9.1",
    "cover": "~0.2.8",
    "jasmine-node": "~1.7",
    "opener": "~1.3"
  },
  "scripts": {
    "test": "jasmine-node spec",
    "test-browser": "opener spec/q-spec.html",
    "lint": "jshint q.js",
    "cover": "cover run jasmine-node spec && cover report html && opener cover_html/index.html"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "readme": "\n[![Build Status](https://secure.travis-ci.org/kriskowal/q-io.png)](http://travis-ci.org/kriskowal/q-io)\n\n# Q-IO\n\nInterfaces for IO that make use of promises.\n\nQ-IO now subsumes all of [Q-HTTP][] and [Q-FS][].\n\n[Q-HTTP]: https://github.com/kriskowal/q-http\n[Q-FS]: https://github.com/kriskowal/q-fs\n\nThe Q-IO package does not export a main module.  You must reach in\ndirectly for `q-io/fs`, `q-io/http`, and `q-io/http-apps`.\n\n## Filesystem\n\n```javascript\nvar FS = require(\"q-io/fs\");\n```\n\nFile system API for Q promises with method signatures patterned after\n[CommonJS/Fileystem/A](http://wiki.commonjs.org/wiki/Filesystem/A) but\nreturning promises and promise streams.\n\n### open(path, options)\n\nOpen returns a promise for either a buffer or string Reader or a Writer\ndepending on the flags.\n\nThe options can be omitted, abbreviated to a `flags` string, or expanded\nto an `options` object.\n\n-   ``flags``: ``r``, ``w``, ``a``, ``b``, default of `r`, not bytewise\n-   ``charset``: default of ``utf-8``\n-   ``bufferSize``: in bytes\n-   ``mode``: UNIX permissions\n-   ``begin`` first byte to read (defaults to zero)\n-   ``end`` one past the last byte to read.  ``end - begin == length``\n\n### read(path, options)\n\n`read` is a shortcut for opening a file and reading the entire contents\ninto memory.  It returns a promise for the whole file contents.  By\ndefault, `read` provides a string decoded from UTF-8.  With the bytewise\nmode flag, provides a `Buffer`.\n\nThe options argument is identical to that of `open`.  \n\n```javascript\nreturn FS.read(__filename, \"b\")\n.then(function (content) {\n    // ...\n})\n```\n\n```javascript\nreturn FS.read(__filename, {\n    flags: \"b\"\n})\n```\n\n### write(path, content, options)\n\n`write` is a shortcut for opening a file and writing its entire content\nfrom a single string or buffer.\n\nThe options are identical to that of `open`, but the \"w\" flag is\nimplied, and the \"b\" flag is implied if the content is a buffer.\n\n```javascript\nreturn FS.write(\"hello.txt\", \"Hello, World!\\n\")\n.then(function () {\n    return FS.read(\"hello.txt\")\n})\n.then(function (hello) {\n    expect(hello).toBe(\"Hello, World!\\n\")\n})\n```\n\n### append(path, content, options)\n\n`append` is a shorthand for opening a file for writing from the end of\nthe existing content from a single string or buffer.\n\nThe options are identical to that of `open`, but the \"w+\" flags are\nimplied, and the \"b\" flag is implied if the content is a buffer.\n\n### copy(source, target)\n\nCopies a single file from one path to another.  The target must be the\nfull path, including the file name.  Unlike at the shell, the file name\nis not inferred from the source path if the target turns out to be a\ndirectory.\n\nReturns a promise for the completion of the operation.\n\n### copyTree(source, target)\n\nCopies a file or tree of files from one path to another.  Symbolic links\nare copied but not followed.\n\nReturns a promise for the completion of the operation.\n\n### list(path)\n\nReturns a promise for a list of file names in a directory.  The file\nnames are relative to the given path.\n\n### listTree(path, guard(path, stat))\n\nReturns a promise for a list of files in a directory and all the\ndirectories it contains.  Does not follow symbolic links.\n\nThe second argument is an optional guard function that determines what\nfiles to include and whether to traverse into another directory.  It\nreceives the path of the file, relative to the starting path, and also\nthe stats object for that file.  The guard must return a value like:\n\n-   `true` indicates that the entry should be included\n-   `false` indicates that the file should be excluded, but should still\n    be traversed if it is a directory.\n-   `null` indiciates that a directory should not be traversed.\n\n### listDirectoryTree(path)\n\nReturns a promise for a deep list of directories.\n\n### makeDirectory(path, mode)\n\nMakes a directory at a given path.  Fails if the parent directory does\nnot exist.  Returns a promise for the completion of the operation.\n\nThe mode is an optional Unix mode as an integer or string of octal\ndigits.\n\n### makeTree(path, mode)\n\nFinishes a path of directories.  For any branch of the path that does\nnot exist, creates a directory.  Fails if any branch of the path already\nexists but is not a directory.\n\nMakes any directories with the given Unix mode.\n\n### remove(path)\n\nRemoves a file at the given path.  Fails if a directory exists at the\ngiven path or if no file exists at the path.\n\n### removeTree(path)\n\nRemoves a file or directory at a given path, recursively removing any\ncontained files and directories, without following symbolic links.\n\n### rename(source, target)\n\nMoves a file or directory from one path to another using the underlying\n`rename(2)` implementation, thus it cannot move a file across devices.\n\n### move(source, target)\n\nMoves a file or directory from one path to another.  If the source and\ntarget are on different devices, falls back to copying and removing,\nusing `copyTree(source, target)` and, if completely successful,\n`removeTree(source)`.\n\n### link(source, taget)\n\nCreates a hard link from the source\n\n### symbolicCopy(source, target, type)\n\nCreates a relative symoblic link from the target to the source with an\neffect that resembles copying a file.\n\nThe type is important for Windows.  It is \"file\" by default, but may be\n\"directory\" or \"junction\".\n\n### symbolicLink(target, link, type)\n\nCreates a symbolic link at the target path.  The link may be absolute or\nrelative.  The type *must* be \"file\", \"directory\", or \"junction\" and is\nmandatory to encourage Windows portability.\n\n### chown(path, uid, gid)\n\nChanges the owner for a path using Unix user-id and group-id numbers.\n\n### chmod(path, mode)\n\nChanges the Unix mode for a path.  Returns a promise.\n\n### stat(path)\n\nFollows all symoblic links along a path and returns a promise for the\nmetadata about a path as a `Stats` object.  The Stats object implements:\n\n-   `size` the size of the file in bytes\n-   `isDirectory()`: returns whether the path refers to a directory with\n    entries for other paths.\n-   `isFile()`: returns whether the path refers to a file physically\n    stored by the file system.\n-   `isBlockDevice()`: returns whether the path refers to a Unix device\n    driver, in which case there is no actual data in storage but the\n    operating system may allow you to communicate with the driver as a\n    blocks of memory.\n-   `isCharacterDevice()`: returns whether the path refers to a Unix\n    device driver, in which case there is no actual data in storage but\n    the operating system may allow you to communicate with the driver as\n    a stream.\n-   `isSymbolicLink()`: returns whether the path refers to a symbolic\n    link or junction.  Stats for symbolic links are only discoverable\n    through `statLink` since `stat` follows symbolic links.\n-   `isFIFO()`: returns whether the path refers to a Unix named pipe.\n-   `isSocket()`: returns whether the path refers to a Unix domain\n    socket.\n-   `lastModified()`: returns the last time the path was opened for\n    writing as a `Date`\n-   `lastAccessed()`: returns the last time the path was opened for\n    reading or writing as a `Date`\n\n### statLink(path)\n\nReturns a promise for the `Stats` for a path without following symbolic\nlinks.\n\n### statFd(fd)\n\nReturns a promise for the `Stats` for a Unix file descriptor number.\n\n### exists(path)\n\nFollows symoblic links and returns a promise for whether an entry exists\nat a given path.\n\n### isFile(path)\n\nFollows symbolic links and returns a promise for whether a file exists\nat a given path and does not cause an exception if nothing exists at\nthat path.\n\n### isDirectory(path)\n\nFollows symbolic links and returns a promise for whether a directory\nexists at a given path and does not cause an exception if nothing exists\nat that path.\n\n### isSymbolicLink(path)\n\nReturns a promise for whether a symbolic link exists at a given path and\ndoes not cause an exception if nothing exists at that path.\n\n### lastModified(path)\n\nFollows symbolic links and returns a promise for the `Date` when the\nentry at the given path was last opened for writing, but causes an\nexception if no file exists at that path.\n\n### lastAccessed(path)\n\nFollows symbolic links and returns a promise for the `Date` when the\nentry at the given path was last opened for reading or writing, but\ncauses an exception if no file exists at that path.\n\n### split(path)\n\nSplits a path into the names of entries along the path.  If the path is\nabsolute, the first component is either a drive (with a colon) on\nWindows or an empty string for the root of a Unix file system.\n\n### join(paths) or join(...paths)\n\nJoins a sequence of paths into a single normalized path.  All but the\nlast path are assumed to refer to directories.\n\n### resolve(...paths)\n\nLike join but treats each path like a relative URL, so a terminating\nslash indicates that a path is to a directory and the next path begins\nat that directory.\n\n### normal(...paths)\n\nTakes a single path or sequence of paths and joins them into a single\npath, eliminating self `.` and parent `..` entries when possible.\n\n### absolute(path)\n\nJoins and normalizes a path from the current working directory,\nreturning a string.\n\n### canonical(path)\n\nReturns a promise for the absolute, canonical location of a given path,\nfollowing symbolic links and normalizing path components.  An entry does\nnot need to exist at the end of the path.\n\n### readLink(path)\n\nReturns a promise for the path string of a symbolic link at a given\npath.\n\n### contains(parent, child)\n\nFor any two absolute or relative paths, computes whether the parent path\nis an ancestor of the child path.\n\n### relative(source, target)\n\nReturns a promise for the relative path from one path to another using\n`..` parent links where necessary.  This operation is asynchronous\nbecause it is necessary to determine whether the source path refers to a\ndirectory or a file.\n\n### relativeFromFile(source, target)\n\nAssuming that the source path refers to a file, returns a string for the\nrelative path from the source to the target path.\n\n### relativeFromDirectory(source, target)\n\nAssuming that the source path refers to a directory, returns a string\nfor the relative path from the source to the target path.\n\n### isAbsolute(path)\n\nReturns whether a path begins at the root of a Unix file system or a\nWindows drive.\n\n### isRelative(path)\n\nReturns whether a path does not begin at the root of a Unix file system\nor Windows drive.\n\n### isRoot(path)\n\nReturns whether a path is to the root of a Unix file system or a Windows\ndrive.\n\n### root(path)\n\nReturns the Windows drive that contains a given path, or the root of a\nUnix file system.\n\n### directory(path)\n\nReturns the path to the directory containing the given path.\n\n### base(path, extension)\n\nReturns the last entry of a path.  If an extension is provided and\nmatches the extension of the path, removes that extension.\n\n### extension(path)\n\nReturns the extension for a path (everything following the last dot `.`\nin a path, unless that dot is at the beginning of the entry).\n\n### reroot(path)\n\nReturns an attenuated file system that uses the given path as its root.\nThe resulting file system object is identical to the parent except that\nthe child cannot open any file that is not within the root.  Hard links\nare effectively inside the root regardless, but symbolic links cannot be\nfollowed outside of the jail.\n\n### toObject(path)\n\nReads every file in the file system under a given path and returns a\npromise for an object that contains the absolute path and a Buffer for\neach of those files.\n\n### glob(pattern)\n\nNot yet implemented\n\n### match(pattern, path)\n\nNot yet implemented\n\n## Mock Filesystem\n\nQ-IO provides a mock filesystem interface. The mock filesystem has the\nsame interface as the real one and has most of the same features, but\noperates on a purely in-memory, in-process, in-javascript filesystem.\n\nA mock filesystem can be created from a data structure. Objects are\ndirectories.  Keys are paths.  A buffer is a file’s contents.  Anything\nelse is coerced to a string, then to a buffer in the UTF-8 encoding.\n\n```javascript\nvar MockFs = require(\"q-io/fs-mock\");\nvar mockFs = MockFs({\n    \"a\": {\n        \"b\": {\n            \"c.txt\": \"Content of a/b/c.txt\"\n        }\n    },\n    \"a/b/d.txt\": new Buffer(\"Content of a/b/d.txt\", \"utf-8\")\n})\n```\n\nYou can also instantiate a mock file system with the content of a\nsubtree of a real file system.  You receive a promise for the mock\nfilesystem.\n\n```javascript\nvar FS = require(\"q-io/fs\");\nFS.mock(__dirname)\n.then(function (fs) {\n    //\n})\n.done();\n```\n\n## HTTP\n\nThe HTTP module resembles [CommonJS/JSGI][].\n\n```javascript\nvar HTTP = require(\"q-io/http\");\n```\n\n[CommonJS/JSGI]: http://wiki.commonjs.org/wiki/JSGI\n\n### Server(app)\n\nThe `http` module exports a `Server` constructor.\n\n-   accepts an application, returns a server.\n-   calls the application function when requests are received.\n    -   if the application returns a response object, sends that\n        response.\n-   ``listen(port)``\n    -   accepts a port number.\n    -   returns a promise for undefined when the server has begun\n        listening.\n-   ``stop()``\n    -   returns a promise for undefined when the server has stopped.\n\n### request(request object or url)\n\nThe `http` module exports a `request` function that returns a promise\nfor a response.\n\n-   accepts a request or a URL string.\n-   returns a promise for a response.\n\n### read(request object or url)\n\nThe `http` module exports a `read` function, analogous to\n`Fs.read(path)`, but returning a promise for the contento of an OK HTTP\nresponse.\n\n-   accepts a request or a URL string.\n-   returns a promise for the response body as a string provided\n    that the request is successful with a 200 status.\n    -   rejects the promise with the response as the reason for\n        failure if the request fails.\n\n### normalizeRequest(request object or url)\n\n-   coerces URLs into request objects.\n-   completes an incomplete request object based on its `url`.\n\n### normalizeResponse(response)\n\n-   coerces strings, arrays, and other objects supporting\n    ``forEach`` into proper response objects.\n-   if it receives `undefined`, it returns `undefined`.  This is used as\n    a singal to the requester that the responder has taken control of\n    the response stream.\n\n### request\n\nA complete request object has the following properties.\n\n-   ``url`` the full URL of the request as a string\n-   ``path`` the full path as a string\n-   ``scriptName`` the routed portion of the path, like ``\"\"`` for\n    ``http://example.com/`` if no routing has occurred.\n-   ``pathInfo`` the part of the path that remains to be routed,\n    like ``/`` for ``http://example.com`` or ``http://example.com/``\n    if no routing has occurred.\n-   ``version`` the requested HTTP version as an array of strings.\n-   ``method`` like ``\"GET\"``\n-   ``scheme`` like ``\"http:\"``\n-   ``host`` like ``\"example.com\"``\n-   ``port`` the port number, like ``80``\n-   ``remoteHost``\n-   ``remotePort``\n-   ``headers``\n    corresponding values, possibly an array for multiple headers\n    of the same name.\n-   ``agent``\n    a custom node [HTTP](http://nodejs.org/api/http.html#http_class_http_agent)\n    or [HTTPS](http://nodejs.org/api/https.html#https_class_https_agent)\n    agent. HTTP and HTTPS agents can implement custom socket pools,\n    allow use of SSL client certificates and self-signed certificates.\n-   ``body``\n-   ``node`` the wrapped Node request object\n\n### response\n\nA complete response object has the following properties.\n\n-   ``status`` the HTTP status code as a number, like ``200``.\n-   ``headers``\n-   ``body`` an IO reader\n-   ``onclose`` is an optional function that this library will call\n    when a response concludes.\n-   ``node`` the wrapped Node response object.\n\n### headers\n\nHeaders are an object mapping lower-case header-names to corresponding\nvalues, possibly an array for multiple headers of the same name, for\nboth requests and responses.\n\n### body\n\nbody is a representation of a readable stream, either for the content of\na request or a response.  It is implemented as a Q-IO reader.\n\n-   ``forEach(callback)``\n    -   accepts a ``callback(chunk)`` function\n        -   accepts a chunk as either a string or a ``Buffer``\n        -   returns undefined or a promise for undefined when the\n            chunk has been flushed.\n    -   returns undefined or a promise for undefined when the stream\n        is finished writing.\n    -   the ``forEach`` function for arrays of strings or buffers is\n        sufficient for user-provided bodies\n-   the ``forEach`` function is the only necessary function for\n    bodies provided to this library.\n-   in addition to ``forEach``, bodies provided by this library\n    support the entire readable stream interface provided by\n    ``q-io``.\n-   ``read()``\n    -   returns a promise for the entire body as a string or a\n        buffer.\n\n### application\n\nAn HTTP application is a function that accepts a request and returns a\nresponse.  The `request` function itself is an application.\nApplications can be chained and combined to make advanced servers and\nclients.\n\n-   accepts a request\n-   returns a response, a promise for a response, or nothing if no\n    response should be sent.\n\n\n## Streams\n\n### Reader\n\nReader instances have the following methods:\n\n-   `read()`\n-   `forEach(callback)`\n-   `close()`\n-   `node` the underlying node reader\n\nAdditionally, the `Reader` constructor has the following methods:\n\n-   `read(stream, charset)` accepts any foreachable and returns either a\n    buffer or a string if given a charset.\n-   `join(buffers)` consolidates an array of buffers into a single\n    buffer.  The buffers array is collapsed in place and the new first\n    and only buffer is returned.\n\nThe `reader` module exports a function that accepts a Node reader and\nreturns a Q reader.\n\n### Writer\n\nWriter instances have the following methods:\n\n-   `write(content)` writes a chunk of content, either from a string or\n    a buffer.\n-   `flush()` returns a promise to drain the outbound content all the\n    way to its destination.\n-   `close()`\n-   `destroy()`\n-   `node` the underlying node writer\n\nThe `writer` module exports a function that accepts a Node writer and\nreturns a Q writer.\n\n### Buffer\n\n```javascript\nvar BufferStream = require(\"q-io/buffer-stream\");\nvar stream = BufferStream(new Buffer(\"Hello, World!\\n\", \"utf-8\"), \"utf-8\")\n```\n\n## HTTP Applications\n\nThe HTTP applications module provides a comprehensive set of JSGI-alike\napplications and application factories, suitable for use with the `http`\nserver and client.\n\n```javascript\nvar Apps = require(\"q-io/http-apps\");\n```\n\n### ok(content, contentType, status) : Response\n\nCreates an `HTTP 200 Ok` response with the given content, content type,\nand status.\n\nThe content may be a string, buffer, array of strings, array of buffers,\na readable stream of strings or buffers, or (generally) anything that\nimplements `forEach`.\n\nThe default content type is `text/plain`.\n\nThe default status is `200`.\n\n### badRequest(request) : Response\n\nAn application that returns an `HTTP 400 Bad request` response for any\nrequest.\n\n### notFound(request) : Response\n\nAn application that returns an `HTTP 404 Not found` response for any\nrequest.\n\n### methodNotAllowed(request) : Response\n\nAn application that returns an `HTTP 405 Method not allowed` response\nfor any request.  This is suitable for any endpoint where there is no\nviable handler for the request method.\n\n### notAcceptable(request) : Response\n\nAn application that returns an `HTTP 406 Not acceptable` response for\nany request.  This is suitable for any situation where content\nnegotiation has failed, for example, if you cannot response with any of\nthe accepted encoding, charset, or language.\n\n### redirect(request, location, status, tree) : Response\n\nNot to be confused with an HTTP application, this is a utility that\ngenerates redirect responses.\n\nThe returns response issues a redirect to the given location.  The\nutility fully qualifies the location.\n\nThis particular method should be used directly to generate an `HTTP 301\nTemporary redirect` response, but passing `307` in the status argument\nturns it into an `HTTP 307 Permanent redirect` response.\n\nThis particular method should be used to send all requests to a specific\nlocation, but setting the `tree` argument to `true` causes the redirect\nto follow the remaining unrouted path from the redirect location, so if\nyou move an entire directory tree from one location to another, this\nredirect can forward to all of them.\n\n### redirectTree(request, location) : Response\n\nProduces an `HTTP 301 Temporary redirect` from one directory tree to\nanother, using `redirect`.\n\n### permanentRedirect(request, location) : Response\n\nProduces an `HTTP 307 Permanent redirect` to a given location, using\n`redirect`.\n\n### permanentRedirectTree(request, location) : Response\n\nProduces an `HTTP 307 Permanent redirect` from one directory tree to\nanother, using `redirect`.\n\n### file(request, path, contentType) : Response\n\nProduces an HTTP response with the file at a given path.  By default, it\ninfers the content type from the extension of the path.\n\nThe file utility produces an `e-tag` header suitable for cache control,\nand may produce an `HTTP 304 Not modified` if the requested resource has\nthe same entity tag.\n\nThe file utility may produce an `HTTP 206 Partial content` response with\na `content-range` header if the request has a `range` header.  If the\npartial range request cannot be satisified, it may respond `HTTP 416 Not\nsatisfiable`.\n\nIn all cases, the response body is streamed from the file system.\n\n### etag(stat)\n\nComputes an entity tag for a file system `Stats` object, using the\n`node.ino`, `size`, and last modification time.\n\n### directory(request, path)\n\nThis is not yet implemented.\n\n### json(object, visitor, tabs) : Response\n\nReturns an `HTTP 200 Ok` response from some JSON, using the same\nargumensts as `JSON.stringify`.\n\n### Content(body, contentType, status) : Application\n\nA factory that produces an HTTP application that will always respond\nwith the given content, content type, and status.  The default content\ntype is `text/plain` and the default status is `200`.\n\nThe body may be a string, array of strings or buffers, or a readable\nstream of strings or buffers.\n\n### File(path, contentType) : Application\n\nA factory that produces an HTTP application that will always respond\nwith the file at the given path.  The content type is inferred from the\npath extension by default, but can be overridden with `contentType`.\n\n### FileTree(path, options) : Application\n\nA factory that produces an HTTP application that responds to all\nrequests with files within a branch of the file system starting at the\ngiven path and using any unprocessed portion of the request location.\n\nOptions include:\n\n-   `notFound(request, response)`: alternate 404 responder, defaults to\n    `HttpApps.notFound`\n-   `file(request, path, contentType, fs)`: alternate file responder,\n    defaults to `HttpApps.file`\n-   `contentType`: forces the content type of file requests, forwarded\n    to the `file` handler.\n-   `directory(request, path, contentType, fs)`: alternate directory\n    responder, defaults to `HttpApps.directory`.\n-   `redirectSymbolicLinks`: directs the client to use a redirect\n    response for symbolic links instead of following links internally.\n-   `permanent`: symbolic links that are turned into HTTP redirects will\n    be permanent.\n-   `followInsecureSymbolicLinks`: directs `FileTree` to serve files\n    that are outside the root path of the file tree if a symbolic link\n    traverses there.\n-   `fs`: alternate file system, defaults to the `fs` module.\n\n### Redirect(path) : Application\n\nA factory that produces an HTTP application that temporarily redirects\nto the given path.\n\n### RedirectTree(path) : Application\n\nA factory that produces an HTTP application that redirects all requests\nunder the requested path to parallel locations at the given path.\n\n### PermanentRedirect(path) : Application\n\nA factory that produces an HTTP application that redirects all requests\nto an exact location and instructs the requester's cache never to ask\nagain.\n\n### PermanentRedirectTree(path) : Application\n\nA factory that produces an HTTP application that redirects all requests\nunder the request path to a parallel location under the given path and\ninstructs the requester's cache never to ask again.\n\n### Cap(app, notFound) : Application\n\nA factory that produces an HTTP application that will cause an `HTTP 404\nNot found` response if the request has not reached the end of its route\n(meaning `pathInfo` is not `\"\"` or `\"/\"`), or will forward to the given\napplication.\n\n### Routing\n\nSeveral routing application factories have the same form.  They all take\nan object as their first argument and an optional fallback application\nas their second.  The object maps each of the supported options for keys\nto an HTTP application for handling that option.\n\n-   Branch(paths, notFound) routes the next unprocessed path component\n-   Method(methods, notFound) routes the HTTP method. Methods are\n    upper-case.\n-   ContentType(contentTypes, notAcceptable) routes based on the\n    \"accept\" request header and produces a \"content-type\" response\n    header.\n-   Langauge(languages, notAcceptable) routes based on the\n    \"accept-language\" header and produces a \"language\" response header.\n-   Charaset(charsets, notAcceptable) routes based on the\n    \"accept-charset\" header and produces a \"charset\" response header.\n-   Encoding(encodings, notAcceptable) routes based on the\n    \"accept-encoding\" request header and produces an \"encoding\" response\n    header.\n-   Host(hosts, notFound) routes based on the host name of the request\n    \"host\" header, which defaults to \"*\".  This is equivalent to virtual\n    host mapping.\n\n### Select(selector) : Application\n\nProduces an HTTP application that uses a function to determine the next\napplication to route.  The `selector` is a function that accepts the\nrequest and returns an HTTP application.\n\n### FirstFound(apps)\n\nReturns an HTTP application that attempts to respond with each of a\nseries of applications and returns the first response that does not have\na `404 Not found` status, or whatever response comes last.\n\n### Error(application, debug) : Application\n\nWraps an application such that any exceptions get converted into `HTTP\n500 Server error` responses.  If `debug` is enabled, produces the\nexception and stack traces in the body of the response.\n\n### Log(application, log, stamp) : Application\n\nWraps an application such that request and response times are logged.\nThe `log` function reports to `console.log` by default.  The\n`stamp(message)` function prefixes an ISO time stamp by default.\n\n### Time(application) : Application\n\nAdds an `x-response-time` header to the response, with the time from receiving\nstarting the request to starting the response in miliseconds.\n\n### Date(application) : Application\n\nAdds a `date` header to the response with the current date for cache\ncontrol purposes.\n\n### Tap(app, tap) : Application\n\nWraps an application such that the `tap` function receives the request\nfirst.  If the tap returns nothing, the request goes to the `app`.  If\nthe `tap` returns a response, the `app` never gets called.\n\n### Trap(app, trap) : Application\n\nWraps an application such that the `trap` function receives the\nresponse.  If it returns nothing, the response if forwarded.  If the\n`trap` returns a response, the original response is discarded.\n\n### ParseQuery(application)\n\nWraps an application such that the query string is parsed and placed in\n`request.parse`.\n\n\n## Coverage\n\nUse `npm run cover` to generate and view a coverage report of Q-IO.\n\n<table>\n    <thead>\n        <tr>\n            <th>File</th>\n            <th>Percentage</th>\n            <th>Missing</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>fs-boot.js</code></td>\n            <td>87%</td>\n            <td>41</td>\n        </tr>\n        <tr>\n            <td><code>fs.js</code></td>\n            <td>72%</td>\n            <td>100</td>\n        </tr>\n        <tr>\n            <td><code>reader.js</code></td>\n            <td>94%</td>\n            <td>8</td>\n        </tr>\n        <tr>\n            <td><code>writer.js</code></td>\n            <td>91%</td>\n            <td>8</td>\n        </tr>\n        <tr>\n            <td><code>fs-common.js</code></td>\n            <td>87%</td>\n            <td>52</td>\n        </tr>\n        <tr>\n            <td><code>fs-root.js</code></td>\n            <td>88%</td>\n            <td>11</td>\n        </tr>\n        <tr>\n            <td><code>fs-mock.js</code></td>\n            <td>91%</td>\n            <td>46</td>\n        </tr>\n        <tr>\n            <td><code>buffer-stream.js</code></td>\n            <td>89%</td>\n            <td>6</td>\n        </tr>\n        <tr>\n            <td><code>http.js</code></td>\n            <td>93%</td>\n            <td>25</td>\n        </tr>\n        <tr>\n            <td><code>http-apps.js</code></td>\n            <td>80%</td>\n            <td>286</td>\n        </tr>\n        <tr>\n            <td><code>http-cookie.js</code></td>\n            <td>79%</td>\n            <td>15</td>\n        </tr>\n    </tbody>\n</table>\n\n---\n\nCopyright 2009–2013 Kristopher Michael Kowal\nMIT License (enclosed)\n\n",
  "readmeFilename": "README.md",
  "_id": "q-io@1.10.9",
  "_from": "q-io@~1.10.6"
}
